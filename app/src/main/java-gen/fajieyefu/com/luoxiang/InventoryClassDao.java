package fajieyefu.com.luoxiang;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import fajieyefu.com.luoxiang.InventoryClass;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table INVENTORY_CLASS.
*/
public class InventoryClassDao extends AbstractDao<InventoryClass, Long> {

    public static final String TABLENAME = "INVENTORY_CLASS";

    /**
     * Properties of entity InventoryClass.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CInvCCode = new Property(1, String.class, "cInvCCode", false, "C_INV_CCODE");
        public final static Property CInvCName = new Property(2, String.class, "cInvCName", false, "C_INV_CNAME");
        public final static Property StandardId = new Property(3, String.class, "standardId", false, "STANDARD_ID");
        public final static Property StandardMoney = new Property(4, String.class, "standardMoney", false, "STANDARD_MONEY");
    };


    public InventoryClassDao(DaoConfig config) {
        super(config);
    }
    
    public InventoryClassDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'INVENTORY_CLASS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'C_INV_CCODE' TEXT," + // 1: cInvCCode
                "'C_INV_CNAME' TEXT," + // 2: cInvCName
                "'STANDARD_ID' TEXT," + // 3: standardId
                "'STANDARD_MONEY' TEXT);"); // 4: standardMoney
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'INVENTORY_CLASS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, InventoryClass entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cInvCCode = entity.getCInvCCode();
        if (cInvCCode != null) {
            stmt.bindString(2, cInvCCode);
        }
 
        String cInvCName = entity.getCInvCName();
        if (cInvCName != null) {
            stmt.bindString(3, cInvCName);
        }
 
        String standardId = entity.getStandardId();
        if (standardId != null) {
            stmt.bindString(4, standardId);
        }
 
        String standardMoney = entity.getStandardMoney();
        if (standardMoney != null) {
            stmt.bindString(5, standardMoney);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public InventoryClass readEntity(Cursor cursor, int offset) {
        InventoryClass entity = new InventoryClass( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cInvCCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cInvCName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // standardId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // standardMoney
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, InventoryClass entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCInvCCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCInvCName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStandardId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStandardMoney(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(InventoryClass entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(InventoryClass entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
