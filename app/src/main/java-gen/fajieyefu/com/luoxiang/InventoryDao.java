package fajieyefu.com.luoxiang;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import fajieyefu.com.luoxiang.Inventory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table INVENTORY.
*/
public class InventoryDao extends AbstractDao<Inventory, Long> {

    public static final String TABLENAME = "INVENTORY";

    /**
     * Properties of entity Inventory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CInvCCode = new Property(1, String.class, "cInvCCode", false, "C_INV_CCODE");
        public final static Property CInvCode = new Property(2, String.class, "cInvCode", false, "C_INV_CODE");
        public final static Property CInvName = new Property(3, String.class, "cInvName", false, "C_INV_NAME");
        public final static Property DeMoney = new Property(4, String.class, "deMoney", false, "DE_MONEY");
        public final static Property RealMoney = new Property(5, String.class, "realMoney", false, "REAL_MONEY");
        public final static Property Counts = new Property(6, String.class, "counts", false, "COUNTS");
        public final static Property Weight = new Property(7, Float.class, "weight", false, "WEIGHT");
        public final static Property ClassId = new Property(8, String.class, "classId", false, "CLASS_ID");
        public final static Property StandardId = new Property(9, String.class, "standardId", false, "STANDARD_ID");
        public final static Property IsCurrent = new Property(10, Integer.class, "isCurrent", false, "IS_CURRENT");
        public final static Property CInvStd = new Property(11, String.class, "cInvStd", false, "C_INV_STD");
        public final static Property U8code = new Property(12, String.class, "u8code", false, "U8CODE");
        public final static Property Styleflag = new Property(13, Integer.class, "styleflag", false, "STYLEFLAG");
        public final static Property ISupplyType = new Property(14, Integer.class, "iSupplyType", false, "I_SUPPLY_TYPE");
        public final static Property CInvDefine1 = new Property(15, String.class, "cInvDefine1", false, "C_INV_DEFINE1");
    };


    public InventoryDao(DaoConfig config) {
        super(config);
    }
    
    public InventoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'INVENTORY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'C_INV_CCODE' TEXT," + // 1: cInvCCode
                "'C_INV_CODE' TEXT," + // 2: cInvCode
                "'C_INV_NAME' TEXT," + // 3: cInvName
                "'DE_MONEY' TEXT," + // 4: deMoney
                "'REAL_MONEY' TEXT," + // 5: realMoney
                "'COUNTS' TEXT," + // 6: counts
                "'WEIGHT' REAL," + // 7: weight
                "'CLASS_ID' TEXT," + // 8: classId
                "'STANDARD_ID' TEXT," + // 9: standardId
                "'IS_CURRENT' INTEGER," + // 10: isCurrent
                "'C_INV_STD' TEXT," + // 11: cInvStd
                "'U8CODE' TEXT," + // 12: u8code
                "'STYLEFLAG' INTEGER," + // 13: styleflag
                "'I_SUPPLY_TYPE' INTEGER," + // 14: iSupplyType
                "'C_INV_DEFINE1' TEXT);"); // 15: cInvDefine1
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'INVENTORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Inventory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cInvCCode = entity.getCInvCCode();
        if (cInvCCode != null) {
            stmt.bindString(2, cInvCCode);
        }
 
        String cInvCode = entity.getCInvCode();
        if (cInvCode != null) {
            stmt.bindString(3, cInvCode);
        }
 
        String cInvName = entity.getCInvName();
        if (cInvName != null) {
            stmt.bindString(4, cInvName);
        }
 
        String deMoney = entity.getDeMoney();
        if (deMoney != null) {
            stmt.bindString(5, deMoney);
        }
 
        String realMoney = entity.getRealMoney();
        if (realMoney != null) {
            stmt.bindString(6, realMoney);
        }
 
        String counts = entity.getCounts();
        if (counts != null) {
            stmt.bindString(7, counts);
        }
 
        Float weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(8, weight);
        }
 
        String classId = entity.getClassId();
        if (classId != null) {
            stmt.bindString(9, classId);
        }
 
        String standardId = entity.getStandardId();
        if (standardId != null) {
            stmt.bindString(10, standardId);
        }
 
        Integer isCurrent = entity.getIsCurrent();
        if (isCurrent != null) {
            stmt.bindLong(11, isCurrent);
        }
 
        String cInvStd = entity.getCInvStd();
        if (cInvStd != null) {
            stmt.bindString(12, cInvStd);
        }
 
        String u8code = entity.getU8code();
        if (u8code != null) {
            stmt.bindString(13, u8code);
        }
 
        Integer styleflag = entity.getStyleflag();
        if (styleflag != null) {
            stmt.bindLong(14, styleflag);
        }
 
        Integer iSupplyType = entity.getISupplyType();
        if (iSupplyType != null) {
            stmt.bindLong(15, iSupplyType);
        }
 
        String cInvDefine1 = entity.getCInvDefine1();
        if (cInvDefine1 != null) {
            stmt.bindString(16, cInvDefine1);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Inventory readEntity(Cursor cursor, int offset) {
        Inventory entity = new Inventory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cInvCCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cInvCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cInvName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deMoney
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // realMoney
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // counts
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // weight
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // classId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // standardId
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // isCurrent
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // cInvStd
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // u8code
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // styleflag
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // iSupplyType
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // cInvDefine1
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Inventory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCInvCCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCInvCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCInvName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeMoney(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRealMoney(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCounts(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWeight(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setClassId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStandardId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsCurrent(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setCInvStd(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setU8code(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStyleflag(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setISupplyType(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setCInvDefine1(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Inventory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Inventory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
