package fajieyefu.com.luoxiang.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import fajieyefu.com.luoxiang.bean.Region;
import fajieyefu.com.luoxiang.db.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table REGION.
*/
public class RegionDao extends AbstractDao<Region, Void> {

    public static final String TABLENAME = "REGION";

    /**
     * Properties of entity Region.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CodeID = new Property(0, String.class, "codeID", false, "CODE_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ParentID = new Property(2, String.class, "parentID", false, "PARENT_ID");
    };


    public RegionDao(DaoConfig config) {
        super(config);
    }
    
    public RegionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'REGION' (" + //
                "'CODE_ID' TEXT," + // 0: codeID
                "'NAME' TEXT," + // 1: name
                "'PARENT_ID' TEXT);"); // 2: parentID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REGION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Region entity) {
        stmt.clearBindings();
 
        String codeID = entity.getCodeID();
        if (codeID != null) {
            stmt.bindString(1, codeID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String parentID = entity.getParentID();
        if (parentID != null) {
            stmt.bindString(3, parentID);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Region readEntity(Cursor cursor, int offset) {
        Region entity = new Region( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // codeID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // parentID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Region entity, int offset) {
        entity.setCodeID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParentID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Region entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Region entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
