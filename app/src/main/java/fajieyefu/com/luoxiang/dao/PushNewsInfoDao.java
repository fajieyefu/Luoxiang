package fajieyefu.com.luoxiang.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import fajieyefu.com.luoxiang.bean.PushNewsInfo;
import fajieyefu.com.luoxiang.db.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PUSH_NEWS_INFO.
*/
public class PushNewsInfoDao extends AbstractDao<PushNewsInfo, Void> {

    public static final String TABLENAME = "PUSH_NEWS_INFO";

    /**
     * Properties of entity PushNewsInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PushId = new Property(0, String.class, "pushId", false, "PUSH_ID");
        public final static Property PushType = new Property(1, Integer.class, "pushType", false, "PUSH_TYPE");
        public final static Property EnableFlag = new Property(2, Integer.class, "enableFlag", false, "ENABLE_FLAG");
    };


    public PushNewsInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PushNewsInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PUSH_NEWS_INFO' (" + //
                "'PUSH_ID' TEXT," + // 0: pushId
                "'PUSH_TYPE' INTEGER," + // 1: pushType
                "'ENABLE_FLAG' INTEGER);"); // 2: enableFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PUSH_NEWS_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PushNewsInfo entity) {
        stmt.clearBindings();
 
        String pushId = entity.getPushId();
        if (pushId != null) {
            stmt.bindString(1, pushId);
        }
 
        Integer pushType = entity.getPushType();
        if (pushType != null) {
            stmt.bindLong(2, pushType);
        }
 
        Integer enableFlag = entity.getEnableFlag();
        if (enableFlag != null) {
            stmt.bindLong(3, enableFlag);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public PushNewsInfo readEntity(Cursor cursor, int offset) {
        PushNewsInfo entity = new PushNewsInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // pushId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // pushType
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // enableFlag
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PushNewsInfo entity, int offset) {
        entity.setPushId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPushType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setEnableFlag(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(PushNewsInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(PushNewsInfo entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
